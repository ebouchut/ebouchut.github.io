{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Eric Bouchut","text":"<p>Hi. From there you can:</p> <ul> <li>learn more about me</li> <li>get in touch with me</li> <li>read my blog </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"blog/tags/#tag:backup","title":"backup","text":"<ul> <li>            Git stash Internals          </li> </ul>"},{"location":"blog/tags/#tag:bookmark","title":"bookmark","text":"<ul> <li>            My Bookmarking Workflow          </li> </ul>"},{"location":"blog/tags/#tag:bookmarking","title":"bookmarking","text":"<ul> <li>            My Bookmarking Workflow          </li> </ul>"},{"location":"blog/tags/#tag:branch","title":"branch","text":"<ul> <li>            Go to the previous branch with git checkout          </li> </ul>"},{"location":"blog/tags/#tag:change","title":"change","text":"<ul> <li>            Git stash Internals          </li> <li>            Go to the previous branch with git checkout          </li> </ul>"},{"location":"blog/tags/#tag:convert","title":"convert","text":"<ul> <li>            Change the case of filenames with Zsh          </li> </ul>"},{"location":"blog/tags/#tag:difference","title":"difference","text":"<ul> <li>            Git stash Internals          </li> </ul>"},{"location":"blog/tags/#tag:file","title":"file","text":"<ul> <li>            Batch File Renaming With Zsh          </li> <li>            Change the case of filenames with Zsh          </li> </ul>"},{"location":"blog/tags/#tag:filename","title":"filename","text":"<ul> <li>            Change the case of filenames with Zsh          </li> </ul>"},{"location":"blog/tags/#tag:git","title":"git","text":"<ul> <li>            Git stash Internals          </li> <li>            Go to the previous branch with git checkout          </li> </ul>"},{"location":"blog/tags/#tag:history","title":"history","text":"<ul> <li>            Go to the previous branch with git checkout          </li> </ul>"},{"location":"blog/tags/#tag:internals","title":"internals","text":"<ul> <li>            Git stash Internals          </li> </ul>"},{"location":"blog/tags/#tag:lowercase","title":"lowercase","text":"<ul> <li>            Change the case of filenames with Zsh          </li> </ul>"},{"location":"blog/tags/#tag:navigate","title":"navigate","text":"<ul> <li>            Go to the previous branch with git checkout          </li> </ul>"},{"location":"blog/tags/#tag:pinboard","title":"pinboard","text":"<ul> <li>            My Bookmarking Workflow          </li> </ul>"},{"location":"blog/tags/#tag:pocket","title":"pocket","text":"<ul> <li>            My Bookmarking Workflow          </li> </ul>"},{"location":"blog/tags/#tag:rename","title":"rename","text":"<ul> <li>            Batch File Renaming With Zsh          </li> <li>            Change the case of filenames with Zsh          </li> </ul>"},{"location":"blog/tags/#tag:shell","title":"shell","text":"<ul> <li>            Change the case of filenames with Zsh          </li> </ul>"},{"location":"blog/tags/#tag:stash","title":"stash","text":"<ul> <li>            Git stash Internals          </li> </ul>"},{"location":"blog/tags/#tag:tag","title":"tag","text":"<ul> <li>            My Bookmarking Workflow          </li> </ul>"},{"location":"blog/tags/#tag:uppercase","title":"uppercase","text":"<ul> <li>            Change the case of filenames with Zsh          </li> </ul>"},{"location":"blog/tags/#tag:workflow","title":"workflow","text":"<ul> <li>            My Bookmarking Workflow          </li> </ul>"},{"location":"blog/tags/#tag:zsh","title":"zsh","text":"<ul> <li>            Batch File Renaming With Zsh          </li> <li>            Change the case of filenames with Zsh          </li> </ul>"},{"location":"blog/about/","title":"About Me","text":"<p>I'm Eric Bouchut, a dedicated software developer with a deep passion for both coding and dancing. My expertise lies in Ruby on Rails and Blockchain. Additionally, I thrive on sharing knowledge and fostering growth.</p> <p>With over 15 years in the software development industry, my journey spans a diverse array of roles:</p> <ul> <li>6+ years as a Ruby on Rails and Java developer at LD Mobile (acquired by S4M, now Ask Locala), contributing to a mobile DSP in the Real-Time Bidding sector for programmatic advertising. I also worked at HostnFly as a Ruby on Rails and Java Developer.  </li> <li>3 years as a Web developer using Java and GWT at Antidot, a private search engine company. </li> <li>5 years of experience in Java and web development for 2 startups: Perform (acquired by BMC) and Miyowa. </li> <li>Engaged in extensive Java-related projects, including a significant 7-year tenure at BMC Software, a Fortune 500 company. </li> <li>3 years of Unix/C/C++ development at an IT consulting firm.</li> <li>Computer science teacher at Axis Digital, where I: <ul> <li>Conducted four distinct training classes for groups of up to 15 individuals over three years. </li> <li>Designed and delivered a course on advanced Unix usage.</li> </ul> </li> </ul> <p>My commitment to professional growth led me to enroll in an online training program at Alyra, where I graduated as a Blockchain and Smart Contracts Developer.</p> <p>Moreover, I'm actively engaged in the open-source community, contributing to the Loop and Trio projects. Specifically, I focus on enhancing their technical documentation. You can explore my contributions in the LoopDocs and TrioDocs repositories, where I collaborate in English with a diverse team distributed across various geographical locations. My responsibilities include improving product documentation as well as configuring and maintaining website publishing platforms leveraging technologies such as MkDocs and mkdocs-material.</p> <p>This open-source initiative aims to provide comprehensive resources for users of Loop and Trio\u2014advanced Automated Insulin Delivery systems for individuals with type 1 diabetes.</p> <p>In 2024, I successfully completed a certified training program in Cybersecurity Development (POEC Cybersecurity Developer) and earned the TOSA Python 3 certification, strengthening my skills in secure coding and cybersecurity.</p> <p>Feel free to reach out if you'd like to connect or learn more about my journey!</p>"},{"location":"blog/contact/","title":"Contact Eric Bouchut","text":"<p> You can get in touch with me via email,  consult my professional profile on LinkedIn,  explore my projects and open source contributions on Github,  and keep up with my news on X.</p>"},{"location":"blog/2015/08/15/batch-file-renaming-with-zsh/","title":"Batch File Renaming With Zsh","text":"<p>I recently discovered <code>zmv</code>, a builtin feature of zsh that makes batch file renaming, a breeze.</p> <p>To use it you need to add this to your zsh configuration file (<code>.zshrc</code>).</p> <pre><code>autoload zmv\n</code></pre> <p>My blog contains several Markdown files with a <code>.markdown</code> extension and I want to use <code>.md</code> instead.</p> <pre><code>ls **/*.markdown\n\n./drafts/2012-05-06-learning-ruby-and-ruby-on-rails.markdown\n./drafts/2015-07-19-welcome-to-jekyll.markdown\n./posts/2012-02-10-baked-with-octopress.markdown\n./posts/2015-08-15-batch-rename-files-with-zsh.markdown\n./posts/2015-08-15-octopress-3-0.markdown\n./about/index.markdown\n./contact/index.markdown\n</code></pre> <p>Note I used the double star zsh notation to recursively list the files with the <code>.markdown</code> suffix.</p> <ul> <li><code>**/</code> will match the current directory or (recursively) any directory below it.</li> <li><code>*.markdown</code> will match any file with the <code>.markdown</code> suffix.</li> </ul> <p><code>ls **/*.markdown</code> is shorter than the alternative <code>find . -name '*.markdown'</code>.</p> <p>Now, <code>zmv</code> comes in handy to recursively change the extension from <code>.markdown</code> to <code>.md</code>.</p> <pre><code>zmv '(**/)(*).markdown' '$1$2.md'\n</code></pre> <p>where:</p> <ul> <li><code>()</code> are used n the source part to capture what is inside the parenteses, for example when processing <code>contact/index.markdown</code></li> <li><code>(**/)</code> captures the path without the filename: <code>contact/</code> (in our example)</li> <li><code>(*)</code> captures the filename without the suffix: <code>index</code></li> <li><code>$1</code> will be replaced by whatever was captured by the first pair of parentheses: <code>contact/</code></li> <li><code>$2</code> will be replaced by whatever was captured by second pair of parenteses: <code>index</code></li> </ul> <p>This means that when processing <code>contact/index.markdown</code>, zmv will do something similar to <code>mv contact/index.markdown contact/index.md</code>.</p> <p>Voil\u00e0, the files have been renamed!</p> <pre><code>ls **/*.md\n\n./drafts/2012-05-06-learning-ruby-and-ruby-on-rails.md\n./drafts/2015-07-19-welcome-to-jekyll.md\n./posts/2012-02-10-baked-with-octopress.md\n./posts/2015-08-15-batch-rename-files-with-zsh.md\n./posts/2015-08-15-octopress-3-0.md\n./about/index.md\n./contact/index.md\n</code></pre> <p>Check your <code>zmv</code> command without actually running it</p> <p>You can use the <code>-n</code> option to ask zmv to print what it would do without actually doing it. This gives you an opportunity to check that everything is ok before running the command  to prevent you from doing a lot of back and forth only because of a typo in the command.</p> <pre><code>zmv -n '(**/)(*).markdown' '$1$2.md'\n\nmv drafts/2012-05-06-learning-ruby-and-ruby-on-rails.markdown drafts/2012-05-06-learning-ruby-and-ruby-on-rails.md\nmv drafts/2015-07-19-welcome-to-jekyll.markdown               drafts/2015-07-19-welcome-to-jekyll.md\nmv posts/2012-02-10-baked-with-octopress.markdown             posts/2012-02-10-baked-with-octopress.md\nmv posts/2015-08-15-batch-rename-files-with-zsh.markdown      posts/2015-08-15-batch-rename-files-with-zsh.md\nmv posts/2015-08-15-octopress-3-0.markdown                    posts/2015-08-15-octopress-3-0.md\nmv about/index.markdown                                       about/index.md\nmv contact/index.markdown                                     contact/index.md\n</code></pre>","tags":["zsh","rename","file"]},{"location":"blog/2017/02/12/my-bookmarking-workflow/","title":"My Bookmarking Workflow","text":"<p>Here is how I set aside links to read them when I have time and classify them with tags to find them easily later on.</p>","tags":["bookmark","tag","bookmarking","workflow","pinboard","pocket"]},{"location":"blog/2017/02/12/my-bookmarking-workflow/#introduction","title":"Introduction","text":"<p>My bookmarking workflow is the following:</p> <ol> <li>Collect Link (URL)</li> <li>Find tags for the link</li> <li>Tag the link</li> <li>Search</li> <li>Read</li> <li>Listen</li> </ol> <p>The bookmarking toolset I use both on Mac and iPhone is composed of 2 online services: Pocket and Pinboard:</p> <ul> <li>Pocket to collect links in a read later list</li> <li>Pinboard is my tagging tool.</li> </ul>","tags":["bookmark","tag","bookmarking","workflow","pinboard","pocket"]},{"location":"blog/2017/02/12/my-bookmarking-workflow/#collect-with-pocket","title":"Collect with Pocket","text":"<p>When I find a Web page interesting at first glance, I add it to Pocket without taking  too much time reading it thoroughly at this stage. This can also be a link in  Gmail that I want to explore later on. The goal is here to send links to Pocket as quickly as possible.  Even if Pocket offers the ability to tag links at this stage, I generally do not do this for two reasons. First off, because Pinboard unfortunately cannot import tags from Pocket. The second reason is to make this initial step of the flow as fast and smooth as possible. Remember  it will occur multiple times a day and must not be a showstopper. You probably do not want nor can read at this stage, all the pages you ultimately intend to bookmark. One of the great strength of Pocket is that you push many links to it in order to read them later on (hence the original name readitlaterlist.com). Use it this way and you will thank yourself. What you put in Pocket will be ready for you to read or even listen to when you decide to do so. The 2 pluses of Pocket are in my opinion: Collect fast, read asynchronously.  Pocket (and Pinboard) give you the ability to decouple collecting an URL from reading the coresponding Web page.</p> <p>Pocket is a web service where you store your read later list. I use its desktop browser plugins and mobile application to save the URL  of interesting web pages that I want to tag, read or listen to later when  it is convenient for me to do so. What's more Pocket allows me to browse them   offline.</p> <ul> <li>The  desktop browser plugin adds a Pocket button that saves the  current page for later.</li> <li>The mobile application for iOS adds the  Pocket Share extension, which is then available in all applications where you can share a link to Pocket.</li> <li>What's more, many mobile applications can \"Save to Pocket\" natively.  This is the case for Inoreader for instance, a cool iOS app I use to read my RSS feeds, when I want to clip an interesting blog post I can do that from within Inoreader itself without even using the Pocket Share extension.</li> </ul> <p>For those of you more visually inclined here is a review of Pocket by Steve Dotto.</p> <p>{{&lt; youtube zGeF5XaQ2tU &gt;}}</p>","tags":["bookmark","tag","bookmarking","workflow","pinboard","pocket"]},{"location":"blog/2017/02/12/my-bookmarking-workflow/#tag-with-pinboard","title":"Tag with Pinboard","text":"<p>I configured Pinboard to automatically import new links from Pocket several times a day. Hence, every time I save a link to Pocket it also ends up in Pinboard.</p> <p>The second step of my workflow takes place in Pinboard where I open each link  to make a quick read  (introduction, title of the main sections, text in bold). Once I get a grasp of what the web page  is about, I choose then set tags  to classify it. I may also remove links that I have already read in Pocket or do not want to archive.</p>","tags":["bookmark","tag","bookmarking","workflow","pinboard","pocket"]},{"location":"blog/2017/02/12/my-bookmarking-workflow/#choose-tags","title":"Choose tags","text":"<p>Here are my guiding principles for choosing tags:</p> <ul> <li> <p>Use the tags you would use the most intuitively to search for the link     you are tagging. Indeed those are the ones you will use in the end when you     do not rembember all the super extra consise and to the point tags you took      so long to find. I'm not saying that it is worthless to search for a     tag, you will need to do that at first, but keep in mind the goal      of a tag is to be used to search for and find a link quickly. </p> <p>Rule of thumb: Taking the time to discover which tags you would use  to search for a link will greatly help you find ad-hoc tags.  Some of them stick very easily in your muscle memory, others don't.  Keep in the mind that the ultimate goal is to find not to have the ultra top  notch tags. * Prefer singular over plural for nouns * Use all lowercase words (easier and faster to type)</p> <p>Depending on your bookmarking service, search may be case insensitive as this is the case for Pinboard. But as online bookmarking services may come and go, you may have one day to migrate to a new one which does not offer this functionality.  I do not follow this principle only for acronyms like <code>HTML</code>, <code>HTTP</code> and <code>JSON</code> for instance.</p> </li> <li> <p>Use verbs in the present tense,     for instance use <code>learn</code> instead of <code>learning</code></p> </li> <li>Use multiple words instead of a single compound word (even those with a dash   in between words).      Use <code>web</code> + <code>site</code> instead of <code>website</code> or <code>web-site</code>, <code>search</code> + <code>engine</code>     instead of <code>searchengine</code>or <code>search-engine</code></li> <li>Define a core set of tags that is meaningful for you and stick to it.     For instance <code>list</code> when a web site or a page contains a list of things,     <code>mutiple</code> instead of <code>several</code> <code>search</code>, <code>find</code> <code>speed</code>, <code>fast</code>, <code>slow</code>.</li> <li> <p>Tag consistently.</p> <p>This last piece of advice will help your future self searching for a link when you can rely on a well known set of core tags.  This is the reason why you need to experiment and adjust your taxonomy over time according to your domain and usage.</p> </li> </ul>","tags":["bookmark","tag","bookmarking","workflow","pinboard","pocket"]},{"location":"blog/2017/02/12/my-bookmarking-workflow/#pinboard","title":"Pinboard","text":"<p>Pinboard is a paid online bookmarking service.  I switched to Pinboard because del.icio.us shifted gears completely when Yahoo sold it to AVOS, it morphed into something that was no longer useful nor efficient for me. Ultimately, it was  way too slow.</p> <p>I can tag links with both Pocket and Pinboard, but I find it considerably easier with Pinboard which has been conceived with this in mind from day one and offers far more tagging related features as you can see in this  review of Pinboard by Rhinofeed.</p> <p>Pinboard Review - Part 1 {{&lt; youtube mqphSmguiFY &gt;}}</p> <p>Pinboard Review - Part 2 {{&lt; youtube QFTjdEUrYCk &gt;}}</p> <p>Back in 2010, Leo Laporte and Amber MacArthur interviewed Maciej Ceglowski the creator of Pinboard. You can watch the interview on Youtube</p>","tags":["bookmark","tag","bookmarking","workflow","pinboard","pocket"]},{"location":"blog/2017/02/12/my-bookmarking-workflow/#read","title":"Read","text":"<p>I open the links afterwards in Pinboard, when I have plenty of time to read the the bookmarked web pages entirely this time. This gives me the opportunity to refine existing tags or add new ones.</p>","tags":["bookmark","tag","bookmarking","workflow","pinboard","pocket"]},{"location":"blog/2017/02/12/my-bookmarking-workflow/#listen","title":"Listen","text":"<p>The reason why I keep using Pocket as an intermediary in between me and Pinboard is two folds.</p> <p>First off, it is a browser plugin which makes adding a link a breeze. It is fast, just one click away.  There is no pop up that takes time to load, (nor form fields to fill in)  and no submit button to press, as this is the case when I bookmark a page with  Pinboard's bookmarklet.</p> <p>Pocket also has a key feature that makes it shine: Text To Speech (TTS). It can read out loud saved web pages.  I use this  often during my daily commute to keep apprised of interesting news and tech articles.  I pick an article from Pocket read later list,click a button and boom! I'm both  learning something that I'm passionate about but I also improve my understanding of the English language while listening to a realistic English  voice Alex. I guess it is based on the built-in TTS functionality of iOS, but adds more on top of that, it scrolls the page to hightlight the current word and make  sure it is always visible.</p> <p>This is the only thing that keeps me from using Pinboard exclusively, such a handy functionality!</p>","tags":["bookmark","tag","bookmarking","workflow","pinboard","pocket"]},{"location":"blog/2017/02/12/my-bookmarking-workflow/#search","title":"Search","text":"<p>You can use Pinboard to search for links by tags, title, description or a combination of those. The search is case-insensitive and matches partial words.</p>","tags":["bookmark","tag","bookmarking","workflow","pinboard","pocket"]},{"location":"blog/2017/02/12/my-bookmarking-workflow/#conclusion","title":"Conclusion","text":"<p>I hope you picked something new to discover in this article whether it is a tool  or a way to collect and process your bookmarks that may improve your workflow.</p>","tags":["bookmark","tag","bookmarking","workflow","pinboard","pocket"]},{"location":"blog/2017/02/13/change-the-case-of-filenames-with-zsh/","title":"Change the case of filenames with Zsh","text":"<p>Today, after importing photos from my iPhone to my Mac, I noticed  their filenames were all uppercase whereas I want them to be all lowercase. This is a task <code>zsh</code> can perform easily with a oneliner.</p> <p>The files before the renaming. <pre><code>IMG_4575.PNG\nIMG_4576.PNG\nIMG_4577.PNG\n</code></pre></p> <p>This oneliner iterates over the files whose name starts with <code>IMG</code> and ends with <code>.PNG</code> and rename each one to lowercase. <pre><code>for file in IMG*.PNG ; do  mv $file ${file:l}  ; done\n</code></pre> The key trick here is <code>${file:l}</code> (with an 'l' as in lowercase) that outputs  the content of the variable <code>file</code> all lowercase. </p> <p>The files have been successfully renamed all lowercase. <pre><code>img_4575.png\nimg_4576.png\nimg_4577.png\n</code></pre></p> <p>Should you need to perform the opposite ie. convert the file names  to uppercase, use <code>${file:u}</code> instead, like so:</p> <pre><code>for file in img*.png ; do  mv $file ${file:u}  ; done\n</code></pre>","tags":["zsh","shell","file","filename","rename","convert","lowercase","uppercase"]},{"location":"blog/2021/07/14/go-to-the-previous-branch-with-git-checkout/","title":"Go to the previous branch with git checkout","text":"<p>You are used to use <code>cd</code> in the shell (bash, zsh) to change folder then  <code>cd -</code> to go back to the folder you were previously in.</p> <p>Good news, <code>git</code> offers a similar shorthand when switching branches.</p> <p>Below, we first change directory to go from <code>folderA</code> to <code>folderB</code>,  then go back to <code>folderA</code> using <code>cd -</code>. <pre><code>cd folderA\ncd folderB  \n\ncd -   # =&gt; back to the previous folder (folderA)\n</code></pre></p> <p>In the same vein, we can switch branches with <code>git checkout branchname</code>  and use <code>git checkout -</code> to jump on the branch we were previously on. Here is an example: <pre><code>git checkout master\ngit checkout branch-a\ngit checkout branch-b\n\ngit checkout -\n</code></pre> We first jump on the <code>master</code> branch, then on <code>branch-a</code> and finally on <code>branch-b</code> </p> <p></p> <p>Then <code>git checkout -</code> jumps back on the branch we were previously on, that is <code>branch-a</code>. Note that in this case <code>git checkout</code> is followed by a dash sign (<code>-</code>) instead of a branch name. This provides a branch agnostic way to go to the previous git branch, without having to type its name.</p> <p>The table below provides the content of the jump stack for each command in the above example.</p> Revision Description git checkout master git checkout branch-a git checkout branch-b @{0} Current branch <code>master</code> <code>branch-a</code> <code>branch-b</code> @{-1} Previous branch <code>master</code> <code>branch-a</code> @{-2} Second to last branch <code>master</code> <p>Each time you jump on a new branch the existing branches on the stack are shifted towards the bottom and the branch you jump on is pushed onto the stack.</p> <p>git provides revisions,  among which we find the handy  shorthand <code>@{0}</code>, <code>@{-1}</code>, <code>@{-2}</code> ... we can use to reference the jump stack elements.</p> <p><code>git checkout -</code> is a shorthand for <code>git checkout @{-1}</code> available since git version 1.6.2.</p>","tags":["git","change","branch","history","navigate"]},{"location":"blog/2021/07/22/git-stash-internals/","title":"Git stash Internals","text":"<p>How does <code>git stash</code> work under the hood? How to view the untracked files in a stash?</p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#definition","title":"Definition","text":"<p>Say you want to set aside your current uncommitted work  in order to fix an urgent bug, or jump on another branch temporarily  then come back to what you were doing later on. This is where  <code>git stash</code> chimes in to provide a way to do this and restore it  later on.</p> <p>In the example below, my working directory is dirty  which means there are unsaved changes in the working directory. Switching to another branch without cleaning things up beforehand would bring  these changed files into this other branch. To prevent that I will use <code>git stash</code> before switching branches, to start off a blank slate.</p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#terminology","title":"Terminology","text":"<p>We may need a bit of terminology refresher in this post. Feel free to skip ahead and come back later if needed.</p> <ul> <li>A tracked file is a file under version control, in other words, git already    knows it because you previously added it to the repository with <code>git add</code> + <code>git commit</code>.</li> <li>An untracked file is not under version control yet.   It is not present in the Index nor in the repository.   This means that you have not <code>git add</code> then <code>git commit</code> this file.</li> <li>Ignored files are declared as such in either <code>.gitignore</code> or   <code>.git/info/exclude</code>. <code>git stash</code> ignores them by default unless you use the   <code>-a</code> option.</li> <li>Working Directory: the directory where you can see and edit files, containing the latest checked-out version of the project from the repository.</li> <li>The Index aka. cache or staging area is a temporary storage location <code>.git/index</code> where git stores each file (in whole or in parts) ready to be committed later on. Think of it like a warehouse where you store a copy of each parcel of a specific shipment when it is ready using <code>git add</code>. Once all the parcels required for this shipment are available in the warehouse  we send the shipment for delivery using <code>git commit</code>.</li> </ul>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#example","title":"Example","text":"<p>Here is the shell script I used to create the repository for this example. You may find it helpful to practice the <code>git stash</code> command line options  starting off a pre-configured playground.</p> <pre><code>mkdir git-stash \ncd git-stash\n\ngit init\ngit commit --allow-empty -m \"First commit\"\n\necho \"temp/\" &gt; .gitignore\ngit add .gitignore\ngit commit -m \"Add gitignore\"\n\necho \"# CONTRIBUTING\" &gt; CONTRIBUTING.md\ngit add CONTRIBUTING.md\ngit commit -m \"Add CONTRIBUTING\"\n\necho \"# README\" &gt; README.md\ngit add README.md\ngit commit -m \"Add README\"\n\n# Staged file: CONTRIBUTING.md\necho \"Here is how you can contribute [...]\" &gt;&gt; CONTRIBUTING.md\ngit add CONTRIBUTING.md\n\n# Modified tracked file: README.md\necho \"## Installation\" &gt;&gt; README.md\n\n# Untracked file: LICENSE\necho \"The MIT License (MIT) [...]\" &gt; LICENSE\n\n# Ignored file: tmp/stash.out\nmkdir temp\ntouch temp/stash.out\n</code></pre> <p>Now let's take a look at the status in the working directory  and the Index after running the above shell script.</p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#git-status","title":"Git Status","text":"<p>Here is the output of <code>git status</code> right before running any of the <code>git stash</code> command.</p> <p></p> <p>Below is the text version of the above image. <pre><code>git status\n\nOn branch master\nChanges to be committed:\n    (use \"git restore --staged &lt;file&gt;...\" to unstage)\n                modified:   CONTRIBUTING.md\n\nChanges not staged for commit:\n    (use \"git add &lt;file&gt;...\" to update what will be committed)\n    (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n                modified:   README.md\n\nUntracked files:\n    (use \"git add &lt;file&gt;...\" to include in what will be committed)\n                LICENSE\n</code></pre></p> <p>There are 3 sections: - <code>Changes to be committed</code> denotes the content of the   Index.(<code>CONTRIBUTING.md</code>) - <code>Changes not staged for commit</code> denotes the tracked files that are  modified in the Working Dir (<code>README.md</code>). - <code>Untracked files</code> denotes the files git does not know about yet (<code>LICENSE</code>)</p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#git-stash-command","title":"Git Stash Command","text":"<p>This section assumes that: - Each command starts from the same state described in the <code>Git Status</code> section. - there is only one stash created and we use <code>stash@{0}</code> to reference it.</p> <p>The table below describes what files are stashed and where (commit) depending on which git stash command is used.</p> Git Stash Command Modified  Tracked File (Working Dir) Index Untracked File Ignored <code>README.md</code> <code>CONTRIBUTING.md</code> <code>LICENSE</code> <code>temp/stash.out</code> <code>git stash</code> \u2611\ufe0f   <code>stash@{0}</code> \u2611\ufe0f   <code>stash@{0}^2</code> \u292c\u00a0 \u292c <code>git stash -u</code> \u2611\ufe0f  <code>stash@{0}</code> \u2611\ufe0f  <code>stash@{0}^2</code> \u2611\ufe0f  <code>stash@{0}^3</code> \u292c <code>git stash -a</code> \u2611\ufe0f  <code>stash@{0}</code> \u2611\ufe0f   <code>stash@{0}^2</code> \u2611\ufe0f  <code>stash@{0}^3</code> \u2611\ufe0f   <code>stash@{0}^3</code> <p>Now, let's take a look at what each <code>git stash</code> command does.</p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#git-stash","title":"git stash","text":"<p>By default, <code>git stash</code> sets aside: - any tracked file that is modified and not ignored: <code>README.md</code> - the Index: <code>CONTRIBUTING.md</code></p> <p>It does not set aside files that are either untracked or ignored  like respectively <code>LICENSE</code> and <code>temp/stash.out</code> .</p> <pre><code>git stash\n</code></pre> <pre><code>git status\n\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nUntracked files:\n    (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    LICENSE\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#git-stash-u","title":"git stash -u","text":"<p>To also stash the untracked files, use the <code>-u</code> option.</p> <p><code>git stash -u</code> sets aside the: - Modified and tracked files: <code>README.md</code> - Index: <code>CONTRIBUTING.md</code> - Untracked files: <code>LICENSE</code></p> <p>That is all the files except the ones that are ignored.</p> <pre><code>git stash -u\n</code></pre> <pre><code>git status\n\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean\n</code></pre>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#git-stash-a","title":"git stash -a","text":"<p>To also stash the ignored files use the <code>-a</code>option instead of <code>-u</code>.</p> <p><code>git stash -a</code> sets aside all the files, that is: - Modified files that git is tracking: <code>README.md</code> - Index: <code>CONTRIBUTING.md</code> - Untracked files:  <code>LICENSE</code> - Ignored files: <code>temp/stash.out</code></p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#stash-stack","title":"Stash Stack","text":"<p>When adding a stash, git creates a stash commit, pushes it on top of the stash stack. This shifts existing stash entries downwards (if any). The reference <code>stash@{0}</code> always denotes the top of the stash stack. Each time you stash something else it is pushed downwards, hence: - <code>stash@{0}</code> denotes the most recent stash created, - <code>stash@{1}</code> denotes the second to last stash created, - <code>stash@{2}</code> denotes the third to last stash created, and so on.</p> <p>Now that we know what is stashed, let's take a look at the way it is stored internally.</p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#what-is-in-a-stash","title":"What is in a stash?","text":"<p>Let's figure out what is in our most recent stash. Let's assume that we ran <code>git stash -u</code> in the example's repository so we end up with this log.</p> <p></p> <p>Now let's take a look at the stash@{0} commit.</p> <pre><code>git log --format=raw -1 stash@{0}\n\ncommit 49482afa4ab999deada67c65dc5d38be89aed867\ntree 936c8b08ac5a8e91bb6cc38387d2cca93167e0ae\nparent 031ca106c13b1603675ea1ce8da8b3da852e27cd\nparent b558b9e7621fe508c7c18713cd62c78e80e2017e\nparent dfac0d769262fa4b8ea40003d24052c4509a7f3a\nauthor Eric Bouchut &lt;ebouchut@gmail.com&gt; 1627056522 +0200\ncommitter Eric Bouchut &lt;ebouchut@gmail.com&gt; 1627056522 +0200\n\n    WIP on master: 031ca10 Add README\n</code></pre> <p></p> <p>The stash commit <code>stash@{0}</code> (<code>49482a</code>) is a merge commit with 3 parents  in this case because we stashed the untracked files, (2 parents by default). It also contains the non ignored files of the working dir that were modified  at the time of the stash.</p> <p>Let's meet the parents: - <code>stash@{0}^1</code> (<code>031ca10</code>) denotes the first parent of the stash commit.  This was the current commit (<code>HEAD</code>) at the time of the stash. - <code>stash@{0}^2</code> (<code>b558b9e</code>) denotes the second parent of the stash commit. It contains the changesets present in the Index at the time of the stash. The Index is aka. as the staging area. This is where the files you add with <code>git add</code> are stored before they can be committed. - <code>stash@{0}^3</code> (<code>dfac0d7</code>) denotes the third parent of the stash commit. It contains the untracked files (<code>-u</code>) and ignored files (<code>-a</code>)  present in the working tree at the time of the stash. <code>git stash</code> creates it only when you use any of the <code>-u</code> or <code>-a</code> options.</p> <p>Why do we need to dive deep into the inner workings of <code>git stash</code>?</p> <p>Up until version 2.32, git did not offer a simple way to list and show the untracked files in a stash commit. This is why we need to know the <code>git stash</code> internals to do this.  You are now ready to understand what is next.</p> <p>We will now list the content of the stash.</p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#files-of-a-stash-commit","title":"Files of a Stash Commit","text":"<p>Now, let's use the command line to list the files saved in a stash: - modified files in the Working Dir - staged \"files\" - untracked and ignored files </p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#modified-files-in-the-working-dir-of-a-stash-commit","title":"Modified Files in the Working Dir of a Stash Commit","text":"<p>Here is how to list modified files in the Working Dir of the most recent  stash commit:</p> <p><pre><code> git log -m --first-parent -1  --format='' --name-only 'stash@{0}'\n</code></pre> Here we drill down on the merge commit (<code>-m</code>) and focus only on the first commit (<code>-1</code>) of the first parent (<code>--first-parent</code>), that is the stash commit itself.  </p> <p>\u2139\ufe0f  By default, git log does not display details about any parent of a merge commit, unless we use <code>-m</code> and when we do use this option, it displays what is requested for each and every parent. As this is not what we want here, we restrict only to the first parent..</p> <p>For whatever reason, even with <code>--name-only</code>, <code>git log</code>  displays non requested information (commit SHA1, date, and author) in addition to the file names. I noticed this issue in git version 2.32.0. This is why I use <code>--format=''</code> as a workaround to remove them.</p> <p>Now, here is how to view what changed in the modified files of the Working Dir  of the most recent stash commit: <pre><code>git log -m --first-parent -1   -p 'stash@{0}'\n</code></pre></p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#staged-files-of-a-stash-commit","title":"Staged Files of a Stash Commit","text":"<p>The command below lists the staged files of the most recent stash commit. <pre><code>git log  --name-only -1 --format='' 'stash@{0}^2'\n</code></pre></p> <p>In order to get the content of the (changesets in the) Index  in this stash commit: <pre><code>git log  -1  -p 'stash@{0}^2'\n</code></pre></p>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/2021/07/22/git-stash-internals/#untracked-files-of-a-stash-commit","title":"Untracked Files of a Stash Commit","text":"<p>Here is how to list the untracked files in the most recent stash commit.</p> <p>From git version 2.32  onwards <code>git show</code> now has the <code>--only-untracked</code> option to list the untracked  files of a stash. </p> <p>\u2139\ufe0f This also lists the ignored files if you used <code>git stash -a</code> to also stash the ignored files.</p> <pre><code>git stash show --only-untracked --name-only 'stash@{0}'\n</code></pre> <p>Before git version 2.32, we should have used instead one of the following 2 alternatives:</p> <p><pre><code>git show --name-only 'stash@{0}^3:'\n</code></pre> Please note the colon sign (<code>:</code>) at the end.</p> <pre><code>git ls-tree -r 'stash@{0}^3' --name-only\n</code></pre> <p>Here is how to view the content of the untracked files (and ignored file(s)  if any) in the most recent stash commit.</p> <p>From git version 2.32 onwards you can use the  <code>--only-untracked</code> option of <code>git show</code>.</p> <pre><code>git stash show --only-untracked -p 'stash@{0}'\n</code></pre> <p>Before git version 2.32, use instead:</p> <pre><code>git log -p 'stash@{0}^3'\n</code></pre>","tags":["git","stash","internals","difference","change","backup"]},{"location":"blog/archive/2021/","title":"2021","text":""},{"location":"blog/archive/2017/","title":"2017","text":""},{"location":"blog/archive/2015/","title":"2015","text":""},{"location":"blog/category/git/","title":"git","text":""},{"location":"blog/category/shell/","title":"shell","text":""},{"location":"blog/category/workflow/","title":"workflow","text":""}]}